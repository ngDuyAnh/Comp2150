
Two classes for game players.
	Human player.
	Computer player.
		These two player classes will use IPlayer interface.
	! cannot modify the interface.
	
class Model
	manages all the players of the game, all cards and turn of the board.
	
main()
    main will ask how many computer opponents are desired before starting the work of the model.
	create players, cards, and model.
	call model to start the game.
	
Game should allow one human player to play against a group of computer players.
	This can be static code.

! Number of cards is not fixed.
Final submition should set 5-8 cards per category for three categories.

class Card
	weapon
	suspect or location
	value

class Guess
	holds 3 cards.
	boolean guess is a suggestion or an accusation.
		Accusation is the final guess of the game for a player.
		If correct, win the game. Otherwise, eliminated.

Constructor to initialize the fields. Only getter method and no setter method.

Model
	Stores the players, cards, and runs the game.
	Give all player a number between 0 to n-1. n is the total number of players.
	This is the arrangement of the player around the table.
	(i + 1) % n, player's turn
	
	Shuffle and distribute all the cards to players as well as holding the three answer cards.
	
	Model receive info from the main method.
	All the player and card receive from the main method.
	
	All game initialization in the model.
	
	Model is responsible to choose the answer for the game.
		Perpetrator, location, and weapon.
	
	Model distribute cards to the players.
		It is ok if someplayer reveice one more card than the other players.
	!All cards get combined, shuffled, and distribute. The cards are in random order.
	
Players
	IPlayer inferface.
		setup() - receives five parameters.
			Number of players in the game, index of current player, list of all the suspects, 
				list of all locations, list of all weapons.
		
		setCard() - Player has been dealt a particulat card.
		
		getIndex() - Return the index of the player. The player's number.
		
		canAnswer() - The current player is responsible for answering that guess if possible.
			Player return a card that the player has in thair hand or null. Null means player cannot answer.
			
		getGuess() - the current player's turn.
			Return the player's guess for that turn.
			Guess can be suggession or accusation.
			
		receiveInfo() - Current player made a guess and the previous play has one of the cards of the guess.
			Null if cannot answer any information about the current player previous guess.
			This method is called after a call to getGuess() by currently player.
			
Junit test Computer Player.
	1) Bi cardsm canAnswer() would return null.
	2) Exactly one card, can answer return that card.
	3) More than one card, return one of the card.
	4) computer given all but n cards and n > 2.
		Call getGuess() should return a guess that does not contain any of the cards that the player 
		has been given. Intial guess from computer player mus tconsist of cards it does not have.
	5) Computer given all but 3 cards from the set of cards. A call to getGuess() should return 
		the correct accusation.
	6) Computer given all but four cards from the set of cards, a call to getGuess() 
		should not return an accusation.
		receiveInfo() is called with one of the four cards, then the next call getGuess() should 
		return the correct accusation.
	7) Human player is given same cards. canAnswer() is called with a guess that includes one or more of the cards 
		the player has.
		Human player cannot give a card that they do not have in their hand, validation in your implementation.
		
1-7 tests should be a separate method. Must use assertions to establish the statements above.
No output should be produced other than output from the assertions.
Name each method as testX with X from 1 to 7 for verification.

Data structure.
	can use ArrayLists to store the information aas illutrated in the interface.
	Collections.shuffle() for shuffling arraylist of cards.
		
Junit test: https://www.youtube.com/watch?v=o5pE7L2tVV8&ab_channel=BrianFraser
